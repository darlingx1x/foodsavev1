import { useState } from 'react';
import { Button } from "@/components/ui/button";

// Define the step type
type Step = {
  id: number;
  title: string;
  content: string;
  icon: string;
};

const HowItWorksSection = () => {
  const [currentStep, setCurrentStep] = useState(0);

  const steps: Step[] = [
    {
      id: 1,
      title: '–®–ê–ì –ü–ï–†–í–´–ô',
      content: '–ù–∞–π–¥–∏—Ç–µ –°—é—Ä–ø—Ä–∏–∑-–ø–∞–∫–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö —Ä—è–¥–æ–º —Å –≤–∞–º–∏. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å–µ–º–µ–π –≤ –¢–∞—à–∫–µ–Ω—Ç–µ, —Å–∫–æ—Ä–æ –∏ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞.',
      icon: 'üîç'
    },
    {
      id: 2,
      title: '–®–ê–ì –í–¢–û–†–û–ô',
      content: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—é—Ä–ø—Ä–∏–∑-–ø–∞–∫–µ—Ç. –ö–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ. –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.',
      icon: 'üõí'
    },
    {
      id: 3,
      title: '–®–ê–ì –¢–†–ï–¢–ò–ô',
      content: '–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤—ã–¥–∞—á–µ. –ë—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!',
      icon: 'üí≥'
    },
    {
      id: 4,
      title: '–®–ê–ì –ß–ï–¢–í–ï–†–¢–´–ô',
      content: '–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ –∏ –ø–æ–º–æ–≥–∞–π—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –ø–∏—â–µ–≤—ã–º–∏ –æ—Ç—Ö–æ–¥–∞–º–∏!',
      icon: 'üéÅ'
    }
  ];

  const nextStep = () => {
    setCurrentStep((prev) => (prev < steps.length - 1 ? prev + 1 : prev));
  };

  const prevStep = () => {
    setCurrentStep((prev) => (prev > 0 ? prev - 1 : prev));
  };

  const goToStep = (stepIndex: number) => {
    setCurrentStep(stepIndex);
  };

  return (
    <section className="w-full bg-primary text-white py-16 px-4">
      <div className="max-w-7xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
        {/* Left Content */}
        <div>
          <h3 className="text-lg font-semibold text-white/80 mb-4">
            –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
          </h3>
          <h2 className="text-4xl lg:text-5xl font-bold mb-6">
            {steps[currentStep].title}
          </h2>
          <p className="text-lg text-white/90 mb-8">
            {steps[currentStep].content}
          </p>
          
          <div className="flex items-center space-x-4">
            <Button 
              variant="ghost" 
              className={`text-white hover:bg-white/10 p-2 ${currentStep === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={prevStep}
              disabled={currentStep === 0}
            >
              <ArrowLeft className="h-6 w-6" />
            </Button>
            
            <div className="flex space-x-2">
              {steps.map((_, index) => (
                <button 
                  key={index}
                  onClick={() => goToStep(index)}
                  className={`w-3 h-3 rounded-full transition-all duration-200 ${index === currentStep ? 'bg-white scale-125' : 'bg-white/50'}`}
                  aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–≥—É ${index + 1}`}
                />
              ))}
            </div>
            
            <Button 
              variant="ghost" 
              className={`text-white hover:bg-white/10 p-2 ${currentStep === steps.length - 1 ? 'opacity-50 cursor-not-allowed' : ''}`}
              onClick={nextStep}
              disabled={currentStep === steps.length - 1}
            >
              <ArrowRight className="h-6 w-6" />
            </Button>
          </div>
        </div>

        {/* Right Content - Step Preview */}
        <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-8 h-96 flex flex-col items-center justify-center text-center">
          <div className="w-24 h-24 bg-white/20 rounded-full flex items-center justify-center mb-6">
            <span className="text-4xl">{steps[currentStep].icon}</span>
          </div>
          <h3 className="text-2xl font-bold mb-4">{steps[currentStep].title}</h3>
          <p className="text-white/90">{steps[currentStep].content}</p>
          
          <div className="mt-8 flex space-x-4">
            <a 
              href="#" 
              className="px-6 py-3 bg-white text-primary font-semibold rounded-lg hover:bg-white/90 transition-colors"
            >
              –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </a>
            <a 
              href="#" 
              className="px-6 py-3 border border-white text-white font-semibold rounded-lg hover:bg-white/10 transition-colors"
            >
              –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
            </a>
          </div>
        </div>
      </div>
    </section>
  );
};

// ArrowLeft component
const ArrowLeft = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
  </svg>
);

// ArrowRight component
const ArrowRight = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
  </svg>
);

export default HowItWorksSection;